# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

$LOAD_PATH.unshift File.expand_path('../..', __FILE__)
require 'site_prism'
require 'capybara'
require 'capybara/rspec'
require 'yaml'
require 'selenium-webdriver'

require 'lib/const'
require 'lib/page_screenshot'

# Monkey path, reset_session since session will be reset for every RSpec it block
module Capybara
  class << self
    alias_method :old_reset_sessions!, :reset_sessions!

    def reset_sessions!
    end
  end
end

# Monkey path, show screenshot on HTML report
RSpec::Support.require_rspec_core 'formatters/base_text_formatter'
RSpec::Support.require_rspec_core 'formatters/html_printer'

module RSpec
  module Core
    module Formatters
      # @private
      class HtmlFormatter < BaseFormatter
        # Override this method if you wish to output extra HTML for a failed
        # spec. For example, you could output links to images or other files
        # produced during the specs.
        def extra_failure_content(failure)
          RSpec::Support.require_rspec_core 'formatters/html_snippet_extractor'
          backtrace = (failure.exception.backtrace || []).map do |line|
            RSpec.configuration.backtrace_formatter.backtrace_line(line)
          end
          backtrace.compact!
          @snippet_extractor ||= HtmlSnippetExtractor.new
          screenshot = "<div class=\"message\"><pre><a href=\"file:///#{failure.example.metadata[:screenshot][:image]}\">Screenshot</a></pre></div>" if failure.example.metadata[:screenshot] && failure.example.metadata[:screenshot][:image]
          "#{screenshot}<pre class=\"ruby\"><code>#{@snippet_extractor.snippet(backtrace)}</code></pre>"
        end
      end
    end
  end
end

# Config web driver
def run_with(driver)
  file_path = File.expand_path('../..', __FILE__)

  RSpec.configure do |config|
    config.before :all do
      case driver
      when :chrome
        Selenium::WebDriver::Chrome::Service.executable_path = "#{file_path}/web_drivers/chromedriver.exe"
      end

      Capybara.register_driver :selenium do |app|
        client = Selenium::WebDriver::Remote::Http::Default.new
        client.timeout = TimeOut::READ_TIMEOUT

        Capybara::Selenium::Driver.new(app, browser: driver, http_client: client)
      end

      Capybara.javascript_driver = :selenium
      Capybara.default_driver = :selenium
      Capybara.default_max_wait_time = TimeOut::WAIT_CONTROL
      browser = Capybara.current_session.driver.browser
      browser.manage.delete_all_cookies
      browser.manage.window.maximize

      SitePrism.configure do |spm_config|
        spm_config.use_implicit_waits = true
      end
    end

    config.after(:each) do |example|
      PageScreenshot.take_screenshot Capybara.current_session, example
    end
  end
end

config = YAML.load_file File.join(File.expand_path('../..', __FILE__), 'config.yml')
run_with config['driver']
